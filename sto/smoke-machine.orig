The year is ending and we have a lot to celebrate! What is a better
way to celebrate the end of the year than with our family and friend?
To achieve that, here at my home, we decided to run a secret santa!
So, my goal is to write a secret santa! That's something where I can
use this wonderful project called Red.

Red is an ORM for perl6 still under development and not published as a
module yet. But it's growing and it is close to a release.

So let's create our first table. A table that will store the people
participating on our secret santa. To the code:

Red maps relational databases to OOP. Each table is mapped to a Red
class (model), each of its objects represents a row.

The way we a create a model is by using the model special word. A
model is just a normal class that extends Red::Model and has a
MetamodelX::Red::Model's object as it's metaclass. Red does not add
any methods you didn't explicit create to its models. So to interact
with the database you should use the metaclass.

But let's continue.

The code creates a new model called Person. The name of the table this
model represents will be the same name as the model: "Person". If
necessary, you can change the name of the table with the is table<...>
trait (for example: model Person is table<another_name> {...}).

This model has 3 attributes:

* 2 of them have an is column trait ($.name and $.email);

* and one has an is serial ($.id). That means the same as is column{
  :id, :auto-increment }.

So every attribute on Person are columns. The is serial (I mean the
:id part) means that it's the table's primary key.

After that it's setting a dynamic var ($*RED-DB) for the result of
database "SQLite". The database sub receive the driver's name and the
parameters it expects.

In this case it's uses the SQLite driver and if you don't pass any
argument, it will use it as an in memory database (if you want to use
a file named secret-santa.db as the database file, you can do database
"SQLite", :database<secret-santa.db>. Or if you want to use a local
Postgres, just use database "Pg"). Red uses the var $*RED-DB to know
what database to use.

OK, now lets create the table! As I said before, Red did not add any
methods you didn't explicitly ask for. So, to create the table a
metaclass' method is used. Person.^create-table is how you create the
table.

Now we should insert some data. We do that with another meta method
(.^create). .^create expect the same arguments .new would
expects. Each named argument will set an attribute with the same
name. .^create will create a new Person object, save it in the
database (with .^save: :insert) and return it.

Every model has a ResultSeq. That is a sequence that represents every
row on the table. We can get its ResultSeq with .^all (or
.^rs). ResultSeq has some methods to help you to get information from
the table, for example: .grep will filter the rows (as it does in a
normal Seq) but it doesn't do that in memory, it returns a new
ResultSeq with that filter set. When its iterator is retrieved, it
runs a SQL query using every thing set on the ResultSeq.

In our example, Person.^all.grep(*.email.defined).map: *.name will run
a query like:

OK, we have a code that can save who is on the secret santa. But each
one on it want different gifts. How can we know what is the wishes of
each one?

Lets modify the code to make it save the wishlist for everyone
participating in the secret santa:

Now we have a new model Wishlist that refers to a table named
withlist. It has $!id as id, $!name and $!link are columns and there
are something new! has UInt $!wisher-id is referencing{ Person.id };
is the same as has UInt $!wisher-id is column{ :references{ Person.id
} }; that means is a column that's a foreign key that references the
id Person's column. It also has a has Person $.wisher is relationship{
.wisher-id }; it's not a column, it's a "virtual" field. the $ sigil
means that there are only 1 wisher for a wish. And is relationship
expects a Callable that will receive a model. If it's Scalar it will
receive the current model as the only argument. So, in this case it
will be Wishlist. The return of the relationsip's Callable must be a
column that references some other column.

Lets see how this table is created:

The Person model has changed too! Now it has a @.wishes relationship
(has Wishlist @.wishes is relationship{ .wisher-id }). It uses a @
sigil so each Person can have more than one wish. The Callable passed
will receive the type of the Positional attribute (Wishlist on this
case) and must return a column that references some other column.

We created a new Person as we did before: my \fernando =
Person.^create: :name<Fernando>, :email<fco@aco.com>; and now we can
use the relationship (wishes) to create a new wish
(fernando.wishes.create: :name<Comma>,
:link<https://commaide.com>). That creates a new wish for Fernando
running the following SQL:

Had you seen? wisher_id is 1... 1 is Fernando's id. Once you have
created the wish from the Fernando's .wishes(), it already knows that
it belongs to Fernando.

Then we loop over every Person in database (Person.^all) and print its
name and loop over that person's wishes and print its name and link.

OK, we can save who is on it... Get what they want... but the draw?
Who should I give a gift to? To do that we change our program again:

Now Person has 2 new attributes ($!pair-id and $.pair) and a new
method (draw). $!pair-id is a foreign key that references to the field
id on the same table (Person) so we have to use an alias
(.^alias). The other one is the relationship ($.pair) that uses that
fk.

The new method (draw) is where the magic happens. It uses the method
.pick: * that on a normal Positional would shuffle the list. And it
does the same here, with the query:

Once we have the shuffled list, we use .rotor to get 2 items and go 1
back, so we save what is the pair of each person, but the last one,
that is set to the first one.

And this is the output of our final code:
