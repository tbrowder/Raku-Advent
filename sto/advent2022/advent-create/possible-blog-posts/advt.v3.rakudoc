=TITLE Scissors, Paper, Rock

I usually try to entitle my Advent articles with a
catchy, Christmasy phrase but, this year, I'm 
changing course and discussing my general use of Raku
and my plan for future work.

However, I will close with my traditional 
seasonal ending.

=head2 Scissors, Paper, Rock

The phrase "scissors, paper, rock" comes from the childhood
game of determining the winner between two people by shaking their closed fist
three times and then showing one of three things with that same fist:
two fingers open (scissors), a flattened hand (paper), 
or a closed fist (rock). If both people show
the same thing, the tie is broken by another round,
and so until two different signs are shown. The
winner is determined by the following rules:
scissors cuts paper, paper covers rock, and rock breaks scissors.

That phrase, in a somewhat different ordering and spelling, encapsulates
my journey with Perl, starting circa 1993, and moving to Raku in
the fall of 2015. I was working
for a US DoD contractor as a weapons effects analyst having to
use Fortran and C to maintain and modify US government-provided programs
that used ray-tracing aginst digital models of military targets.
The central analysis tool was a program called [BRL-CAD](https://brl-cad.org), written originally
in C and Tcl (for graphics), now using a mixture of C, Tcl, and C++. The program's original
author, now deceased, was the author of the famous program 'ping'.
In later years the program was released by the government to be open-sourced
but managed by a government contractor with US Army oversight.

The basic workflow was:

+ using official technical documents, as well as hands-on data when available,
  create a model of the system using BRL-CAD's description language
+ create a flow diagram (a fault tree) describing the critical components
  of the system and their relationship to various kill types (e.g., MOBILITY, FIRE-POWER, CATASTROPHIC)
+ create BRL-CAD description of weapons to be used against target models
+ for each target to be analyzed and for each configuration of the target,
    for each weapon and 3D aim point
      for each horizontal and vertical attack angle combination
        for the plane defined by that combination
           for each four-inch square on the plane 
              define an aimpoint in that grid (fixed or random)
              fire a shot line (a ray) from outside the target through the aimpoint
              programatically 
              for each surface contacted by the ray
+ collect all the data for all the runs

As an example of the total runs required for a simple case of one target, following are 
data for each phase of computer data collection.

We use example case of one
target and one weapon over a typical set of other parameters over a sphere 10 feet
in radius resting on level ground and using a four-inch grid.
The aimpoint in each case is the center of the sphere.
The number of four-inch grid cells is approximately the area of a circle
of 10-foot radius (314 sq-ft) divided by the area of a grid cell (0.1 sq-ft): 3140.

Parameter  | Range                               | Number of shots
Azimuth    | 0-330 degrees, 30-degree increments | 11
Elevation  | 0-75 degrees, 15-degree increments  | 8
Ekevation  | 90 degrees                          | 1
Grid cells | 3140                                | 3140

The number of combination of azimuth/elevation stays comstant at 89, but
the number of grid cells varies by the square of the presented area.
area (presented areaTotal: approximately 8,800. If we take a more
realistic example of the approximate size of an armored vehicle like
a tank represented by two rectangular prisms, the hull and the turret:

as two boxes:

26x4x12 hull
12x3x10 turret


Number of 

run BRL-CAD multiple times over a large combination of horizontal and vertical
  - for each plane described by a combination of one azimuth and one elevation


